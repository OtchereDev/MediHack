// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  name             String
  password         String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  EmergencyContact EmergencyContact[]
  SOS              SOS[]
}

model ForgotPassword {
  id        Int      @id @default(autoincrement())
  email     String
  code      String
  isUsed    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Professional {
  id        Int                      @id @default(autoincrement())
  email     String                   @unique
  name      String
  phone     String
  password  String
  type      ProfessionalType
  status    ProfessionalStatus       @default(IDLE)
  location  Unsupported("geometry")?
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt
  SOS       SOS[]
}

enum ProfessionalStatus {
  IDLE
  MOVING
}

enum ProfessionalType {
  NURSE
  EMT
  AMBULANCE
}

model EmergencyContact {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String
  address   String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
}

model SOS {
  id             Int                      @id @default(autoincrement())
  location       Unsupported("geometry")?
  user           User                     @relation(fields: [userId], references: [id])
  message        String
  status         SOSStatus                @default(INITIATED)
  professional   Professional?            @relation(fields: [professionalId], references: [id])
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  userId         Int
  professionalId Int?
}

enum SOSStatus {
  INITIATED
  ACCEPTED
  CANCELLED
  COMPLETED
}

model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)

  @@ignore
}
